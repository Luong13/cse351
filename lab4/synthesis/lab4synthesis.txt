********************
* Lab 4 Synthesis *
********************
Name: Luong Dinh
ID: 2066624


-----------------------------------------------------------
1) Instructions in the nested loops that access memory
   lab0.d: 19 instructions
   List of instructions for lab0.d:
  400987:       48 89 45 d0             mov    %rax,-0x30(%rbp)
  40098b:       c7 45 ec 00 00 00 00    movl   $0x0,-0x14(%rbp)
  400994:       c7 45 e8 00 00 00 00    movl   $0x0,-0x18(%rbp)
  40099d:       c7 45 e4 00 00 00 00    movl   $0x0,-0x1c(%rbp)
  4009a6:       8b 55 ec                mov    -0x14(%rbp),%edx
  4009a9:       8b 45 e8                mov    -0x18(%rbp),%eax
  4009af:       8b 55 e4                mov    -0x1c(%rbp),%edx
  4009b2:       8b 4d e8                mov    -0x18(%rbp),%ecx
  4009b5:       8b 45 ec                mov    -0x14(%rbp),%eax
  4009bc:       e8 78 ff ff ff          callq  400939 <bigArrayIndex>
  4009cb:       48 8b 45 d8             mov    -0x28(%rbp),%rax
  4009d2:       8b 55 e4                mov    -0x1c(%rbp),%edx
  4009d7:       89 10                   mov    %edx,(%rax)
  4009d9:       83 45 e4 01             addl   $0x1,-0x1c(%rbp)
  4009dd:       81 7d e4 f3 01 00 00    cmpl   $0x1f3,-0x1c(%rbp)
  4009e6:       83 45 e8 01             addl   $0x1,-0x18(%rbp)
  4009ea:       81 7d e8 f3 01 00 00    cmpl   $0x1f3,-0x18(%rbp)
  4009f3:       83 45 ec 01             addl   $0x1,-0x14(%rbp)
  4009f7:       81 7d ec f3 01 00 00    cmpl   $0x1f3,-0x14(%rbp)

   lab0opt.d: 1 instruction
   List of instructions for lab0opt.d:
  4009bb:       89 0c 96                mov    %ecx,(%rsi,%rdx,4)


-----------------------------------------------------------
2) Where are the loop variables stored in lab0.d:
   i: -0x14(%rbp)
   j: -0x18(%rbp)
   k: -0x1c(%rbp)
-----------------------------------------------------------
3) Corresponding values in lab0opt.d:
   %edx: k
   %ecx: k
-----------------------------------------------------------
4) Effect on number of misses: Increase

   Explain: My transpose code is written so that for the 32x32 matrix, the transpose is broken down into smaller 8x8 matrices. This is so that each row of the smaller 8x8 matrix would take up 8 * 4 = 32 bytes and would correspond to one block of the cache, assuming the matrix starts at the start of a block. If the matrix does not start at the start of a block, each row of the smaller 8x8 matrix will take up two blocks, which means two misses every time a new row is read, instead of one.


-----------------------------------------------------------
5) Effect on number of misses: Increase

   Explain: My transpose code for the 64x64 matrix transposes the matrix in smaller 4x4 matrices. This works nicely for the cache because all the ints in the 4x4 matrix fit into the same cache image, which minimizes cache misses. And a 57x71 matrix cannot be broken down into chunks that fit nicely into the cache image.


-----------------------------------------------------------
